searchState.loadedDescShard("tower_test", 0, "Mock <code>Service</code> that can be used in tests.\nAsserts that the mock handle receives a new request equal …\nMock <code>Service</code> that can be used in tests.\nHandle to the <code>Mock</code>.\nA mock service\nSend a response in reply to a received request.\nAllow a certain number of requests\nError types\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuture types\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the next request.\nCreate a new <code>Mock</code> and <code>Handle</code> pair.\nAsynchronously gets the next request\nMake the next poll_ method error with the given error.\nResolve the pending request future for the linked request …\nResolve the pending request future for the linked request …\nSpawn mock services onto a mock task.\nSpawn a Service onto a mock task.\nSpawn a layer onto a mock service.\nSpawn a Service via the provided wrapper closure.\nError yielded when a mocked service does not yet accept …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture of the <code>Mock</code> response.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nService spawned on a mock task\nCall the inner Service.\nReturns the argument unchanged.\nGet a mutable reference to the inner service.\nGet a reference to the inner service.\nCalls <code>U::from(self)</code>.\nGet the inner service.\nCheck if this service has been woken up.\nCreate a new spawn.\nPoll this service ready.\nGet how many futurs are holding onto the waker.")